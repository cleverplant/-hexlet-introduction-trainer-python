#  Traversing lines
#  Обход строк
'''
Задание
Реализуйте функцию print_reversed_word_by_symbol(), 
которая печатает переданное слово посимвольно, как в примере из теории, 
но делает это в обратном порядке.'''

# word = 'Hexlet'

# print_reversed_word_by_symbol(word)
# => 't'
# => 'e'
# => 'l'
# => 'x'
# => 'e'
# => 'H'
print('======= Решение учителя: 1  ===================================================================')
# Решение учителя:
def print_reversed_word_by_symbol(word):
    i = len(word) - 1 # <= инициализируем последний символ в строке 

    while i >= 0:
        print(word[i])
        i = i - 1
slovo = 'Hexlet'        
print_reversed_word_by_symbol(slovo)

print('=== Строки ==============================================================================')


'''Строки'''
#  Задание
#  Реализуйте функцию join_numbers_from_range(), которая объединяет все числа из диапазона в строку:

#  join_numbers_from_range(1, 1)   # '1'
#  join_numbers_from_range(2, 3)   # '23'
#  join_numbers_from_range(5, 10)  # '5678910'
print('======= Решение учителя: 2  ===================================================================')
#  Решение учителя:
def join_numbers_from_range(start, end):
    i = start
    result = ''
    while i <= end:
        result = result + str(i)
        i = i + 1
    return result

print('============================================================================================')

def print_name_by_symbol(name):
    i = 0
    # Такая проверка будет выполняться до конца строки
    # включая последний символ. Его индекс `length - 1`.
    while i < len(name): # <= или i <= len(name) - 1. Оба способа приводят к одному результату

        # Обращаемся к символу по индексу
        print(name[i])
        i += 1   # => i = i + 1

name = 'Hexlet'
print_name_by_symbol(name)


print('======= src/solution.py ===============================================================')
#  src/solution.py
'''
Реализуйте функцию my_substr(), которая извлекает из строки подстроку указанной длины.
Она принимает на вход два аргумента (строку и длину) и возвращает подстроку, начиная с первого символа:'''

#  string = 'If I look back I am lost'
#  print(my_substr(string, 1))  # => 'I'
#  print(my_substr(string, 7))  # => 'If I lo'

'''
Используйте тот же подход, что в функции для переворота строки из урока: 
собирайте строку-результат в цикле, перебирая начальную строку до определённого момента.

Эту задачу можно решить при помощи слайсов. 
Но в этом упражнении мы хотим потренироваться в использовании циклов 
и поэтому реализуем эту функциональность самостоятельно. Именно так внутри и работают слайсы.'''

#  Решение учителя:
def my_substr(string, length): # <= принимает на вход два аргумента (строку и длину)

    result = '' # <= инициализируем строку с нейтрального значения

    i = 0 # <= инициализируем счетчик символов в строке с нейтрального значения 
             # (при сложении = 0, при умножении = 1) 

    while i < length: # <= задаем условие = (length - длина) - должна быть больше символов в строке
                      # как только достигнет заданной длины - вернет результат  result

        result = result + string[i] # <= прибавляет к  => ( '' ) + каждый символ в строке
        
        i = i + 1 # <= счетчик прибавляет символ к предыдущему в предложении
    return result

string = 'If I look back I am lost'

print(my_substr(string, 1))  # => 'I'
print(my_substr(string, 7))  # => 'If I lo' 


print('========"Строки"==========================================')

#  Задание
#  Реализуйте функцию join_numbers_from_range(), которая объединяет все числа из диапазона в строку:

#  join_numbers_from_range(1, 1)   # '1'
#  join_numbers_from_range(2, 3)   # '23'
#  join_numbers_from_range(5, 10)  # '5678910'
print('==== Решение учителя: ==============================================')
#  Решение учителя:
def join_numbers_from_range(start, end):
    i = start
    result = ''
    while i <= end:
        result = result + str(i)
        i = i + 1
    return result
print(join_numbers_from_range(1, 1))  # '1'
print(join_numbers_from_range(2, 3))  # '23'
print(join_numbers_from_range(5, 10))  # '5678910'


