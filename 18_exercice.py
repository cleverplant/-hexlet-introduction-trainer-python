name = 'python'
# Используется интерполяция
print(f'Последний символ: {name[len(name) - 1]}')
# 'Последний символ: n'

name = 'python'
print(name[len(name) - 1])

'''===============================================================================

Вопрос: 1 
Функция get_one() возвращает единицу. Что будет выведено на экран?'''

# print(get_one())

# Будет выведено тело функции
'''Вызов функции – выражение. На экран будет выведен результат её работы – 1 (единица)'''
# Ничего, так как функция get_one() сама ничего не выводит на экран, она только возвращает значение'''

'''
Вопрос: 2 
Выберите верное утверждение:
'''
#  Лучше не разделять вызовы на промежуточные вычисления, так код получается короче
'''Разделение вызовов на промежуточные вычисления облегчает чтение кода и его отладку'''
#  Если слишком увлекаться промежуточными переменными, 
# то память компьютера расходуется неэффективно

'''
Вопрос: 3 
Функция sum_() принимает два числа и возвращает их сумму. 
Взгляните на код ниже. Какое число будет выведено на экран?'''
# result = sum_(sum_(1, 3), sum_(sum_(4, 2), 3))
# print(result)  

#  12
'''13'''
#  14

'''=============================================================================='''
#    src/solution.py
''' 
С помощью функции hex() выведите на экран шестнадцатеричное значение переменной 
number (предварительно округлите его до целого числа). 
Как работает функция hex(), можно изучить на странице документации.'''

#  src/solution.py
'''С помощью функции hex() выведите на экран 
шестнадцатеричное значение переменной number
(предварительно округлите его до целого числа). 
Как работает функция hex(), можно изучить на странице документации.'''

number = 10.1234
# BEGIN (write your solution here)

print(hex(round(number)))
# print(hex(round(number,0)))

# END

