# function signature
# сигнатура функции

# Сигнатура функции пишется в самом начале. 
# Она состоит из: Ключевого слова def, которое говорит питону о том, 
# что здесь мы начинаем писать новую функцию.

'''
Функция pow(), возводящая число в какую-нибудь степень, принимает два параметра: 
какое число возводить и в какую степень возводить.

Если вызывать pow() без параметров, то Python выдаст следующее: 
"TypeError: pow expected at least 2 arguments, got 0". 
Интерпретатор сообщает, что функция ожидает 2 параметра, 
а вы вызвали её без параметров.

Тот, кто создавал функцию pow(), сделал её функцией с двумя обязательными параметрами, 
поэтому pow() невозможно вызвать с другим количеством параметров.

Более того, параметрами pow() могут быть только числа. 
Попытка передать в неё, например, пару строк приведет к следующей ошибке: 
"TypeError: unsupported operand type(s) for ** or pow(): 'str' and 'str'". 
Результат вызова функции — тоже всегда число.

Другая функция может иметь другое число параметров и другие типы параметров. 
Например, может существовать функция, которая принимает три параметра: число, 
строку и еще одно число.

Откуда мы знаем, сколько каких параметров нужно функции pow() 
и какого типа будет «возврат»? Мы заглянули в сигнатуру этой функции. 
Сигнатура определяет входные параметры и их типы, а также выходной параметр и его тип. 
Про функцию pow() можно почитать в официальной документации Python или 
в неофициальной документации (https://pyprog.pro/python/st_lib/math.html#math_pow) 
на русском языке. Обычно документация для функции имеет вид:'''

# pow(x, y[, z])
# Возвращает x в степени y; если z присутствует, возвращает x в степени y, по модулю z.

'''
Первая строка здесь — это сигнатура функции. 
У функции два обязательных параметра — x и y. 
Параметр z указан в квадратных скобках. Это означает, что он является не обязательным. 
Следом идёт пояснение, для чего функция нужна. 
Документация позволяет понять сколько аргументов у функции и какого они типа, 
возвращает ли что-то функция и если да, то какой тип будет иметь возвращаемое значение.
======================================================================================='''

# Аргументы по умолчанию

'''Рассмотрим функцию round(), которая округляет переданное ей число:'''

result = round(10.25, 0)  # 10.0 
print(result)

'''А если нужна другая точность, то можно передать параметр:'''

# округление до одного знака после запятой
result = round(10.25, 1)  # 10.2
print(result)

'''
Если функция в Python принимает необязательные аргументы, 
то они всегда стоят после обязательных. Их количество может быть любым 
(это зависит от самой функции), 
но они всегда идут рядом и в конце списка аргументов.'''




