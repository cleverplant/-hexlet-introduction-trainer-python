#   Решение учителя:

from unittest import result


def truncate(text, length):
    # BEGIN
    result = f"{text[0:length]}..."
    return result
    # END
# ==============================================================================================    
'''
Вопрос: 1 из 2. Правильных ответов: 0
Что произойдёт в результате выполнения такого кода:'''

def sum(a, b):
    return a + b
 
# print(sum(2))
#   На экран будет выведено число 2, ведь мы не передавали второй аргумент в функцию. По умолчанию он равен None

''' Интерпретатор выдаст ошибку TypeError: f() missing 1 required positional argument: 'b', 
    так как не был передан второй аргумент'''
# ===============================================================================================
'''
Вопрос: 2 из 2. Правильных ответов: 1
Можно ли записать в качестве аргумента какое-то значение в определении функции?'''

#   Значение записать можно, только оно должно быть последним среди всех параметров определяемой функции
''' Нельзя. Аргумент принимает значение при вызове функции, поэтому он должен быть переменной'''
#   Конечно можно, ведь все функции работают внутри с какими-то значениями
# ===============================================================================================

# src/solution.py

'''
Реализуйте функцию truncate(), которая обрезает переданную строку до указанного количества символов, 
добавляет в конце троеточие и возвращает получившуюся строку. Подобная логика часто используется на сайтах, 
чтобы отобразить длинный текст в сокращенном виде.

Функция принимает два параметра:
1. Строка, которую нужно обрезать
2. Число символов, которые нужно оставить
Пример того, как должна работать написанная вами функция:'''

# Передаём текст напрямую
# Обрезаем текст, оставляя 2 символа
truncate('hexlet', 2)  # 'he...'
 
# Через переменную
text = 'it works!'
# Обрезаем текст, оставляя 4 символа
truncate(text, 4)  # 'it w...'

'''
Реализовать эту функцию можно различными способами, подскажем лишь один из них. 
Для решения этим способом вам понадобится взять подстроку из строки, переданной первым параметром в функцию. 
Используйте для этого срезы строк. Подумайте, исходя из задания, 
с какого индекса и по какой вам надо извлечь подстроку?'''

# Передавать границы среза можно через переменные
# index = 3
# word[:index] // 'wel'

# ====================================================================================================
def get_last_char(string):
    index = 3
    return string[:index]
word = 'welcome!'
print(get_last_char(word))  # wel
# ====================================================================================================

# Передавать границы среза можно через переменные
# index = 3
# word[:index] // 'wel'

'''
С точки зрения проверочной системы не имеет значения, каким из способов будет реализована функция truncate() 
внутри, главное – чтобы она выполняла поставленную задачу'''

# ===========================================================================================================
'''Решение учителя:'''

def truncate(text, length):
    # BEGIN
    result = f"{text[0:length]}..."
    return result
    # END
# =========================================================================================================

def truncate(text, length):
    # BEGIN
    result = f"{text[0:length]}..."
    return result
    # END
word = 'akunamatata!'
print(truncate(word, 5 ))     


