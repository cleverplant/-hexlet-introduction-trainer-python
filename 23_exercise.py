name = 'Tirion'
# Чему равен результат такого вызова?
# ==================================================
print(name[1:5].upper().find('I'))
# ==================================================
upper_name = name[1:5]
print(upper_name.upper()) 

find_name = upper_name.upper()
print(find_name.find('I'))
# ==================================================

name = 'Pythom'
print(name.find('y'))

'''============================================================================'''
# Вопрос: 1 из 3. Правильных ответов: 0
# Что будет выведено на экран?

company = "Hexlet"
print(company.upper().lower().upper().lower().upper().lower())  # ?

#  HEXLET
'''hexlet'''
#  Hexlet

'''============================================================================'''
# Вопрос: 2 из 3. Правильных ответов: 1
#  Ограничена ли длина цепочек?

#  Да, ограничена шириной экрана
#  Да, не больше 10 методов в одной цепочке
'''Нет, ограничений нет, но очень длинными лучше не делать''' 

'''============================================================================='''
# Вопрос: 3 из 3. Правильных ответов: 2
# Заработает ли данный код?

company = "Hexlet"
# print(name.upper.lower().len())

'''Нет'''
#  Да
#  Почти

'''============================================================================='''
# src/solution.py
# С помощью слайсов, получите часть предложения, записанного в переменную text, 
# c 5 по 16 символы включительно. Полученную подстроку обработайте методом .strip() 
# и выведите на экран длину итоговой подстроки. Выполните эти операции подряд в цепочке без создания промежуточных переменных. 

text = 'When \t\n you play a \t\n game of thrones you win or you die.'
print(text)
# BEGIN (write your solution here)
print(len(text[4:16].strip()))
# END




