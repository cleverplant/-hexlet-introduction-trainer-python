# Optional function parameters
# Необязательные параметры функций

'''
В программировании большое количество функций и методов имеют параметры, 
которые редко меняются. 
В таких случаях этим параметрам задают значения по умолчанию, 
которые можно поменять по необходимости. 
Этим немного сокращается количество одинакового кода. 
Пример:'''

# Функция возведения в степень
# Второй параметр имеет значение по умолчанию 2
def pow(x, base=2):
    return x ** base

# 3 во второй степени (двойка задана по умолчанию)
pow(3)  # 3 * 3 = 9
# три в третьей степени
pow(3, 3)  # 3 * 3 * 3 = 27

'''Значение по умолчанию выглядит как обычное присваивание в определении. 
Оно срабатывает только в том случае, если параметр не передан. К этому нужно привыкнуть. 
Значение по умолчанию может быть даже в том случае, когда параметр один:'''

def my_print(text='nothing'): # => задан параметр, который будет по умолчанию
    print(text)

my_print()  # => "nothing" ========> в скобках ничего нет - значит параметр по умолчанию 'nothing'
my_print("Hexlet")  # => "Hexlet" => теперь будет параметр, который мы ввели   

'''Параметров со значениями по умолчанию может быть сколько угодно:'''

#  def f(a=5, b=10, c=100):
'''
У значений по умолчанию есть одно ограничение. 
Они должны идти в самом конце списка параметров.
То есть, с точки зрения синтаксиса, невозможно создать функцию, 
у которой после необязательного параметра идет обязательный:'''

'''после обязательного параметра идет необязательный'''
# Такой код завершится с ошибкой'''

# def f(a=5, b=10, c=100, x):
# И такой
#  def f(a=5, b=10, x, c=100):

'''после обязательного параметра идет необязательный'''
# А вот такой сработает
def f(x, a=5, b=10, c=100):
    return x
print(f(x=3))    
def f(x, y, a=5, b=10, c=100):
    return x, y
print(f(x=5, y=9))
